import streamlit as st
import numpy as np
import joblib
from sklearn.ensemble import RandomForestClassifier
from sklearn.datasets import make_classification

st.set_page_config(page_title="توقع مرض القلب", layout="centered")

@st.cache_resource
def load_model():
    X, y = make_classification(n_samples=100, n_features=11, random_state=42)
    model = RandomForestClassifier().fit(X, y)
    return model

model = load_model()

st.title("🩺 توقع وجود مرض القلب")

fields = {
    'Age': st.number_input("العمر", 0, 120, 30),
    'Sex': st.selectbox("الجنس", [0, 1], format_func=lambda x: "أنثى" if x == 0 else "ذكر"),
    'ChestPainType': st.slider("نوع ألم الصدر (0-3)", 0, 3, 1),
    'RestingBP': st.number_input("ضغط الدم أثناء الراحة", 0, 300, 120),
    'Cholesterol': st.number_input("الكوليسترول", 0, 600, 200),
    'FastingBS': st.selectbox("سكر صائم > 120؟", [0, 1]),
    'RestingECG': st.slider("نتيجة ECG (0-2)", 0, 2, 1),
    'MaxHR': st.number_input("أقصى معدل نبض", 0, 300, 150),
    'ExerciseAngina': st.selectbox("ذبحة صدرية بعد الجهد؟", [0, 1], format_func=lambda x: "لا" if x == 0 else "نعم"),
    'Oldpeak': st.number_input("Oldpeak", 0.0, 10.0, 1.0),
    'ST_Slope': st.slider("ميل ST (0-2)", 0, 2, 1)
}

if st.button("🔍 توقّع"):
    input_data = np.array([list(fields.values())])
    prediction = model.predict(input_data)
    if prediction[0] == 1:
        st.error("🚨 يوجد احتمال لمرض القلب")
    else:
        st.success("✅ لا يوجد مرض قلب")

git add app.py
git commit -m "Add app.py for deployment"
git push
